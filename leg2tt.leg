# LE Grammar for LE Grammars..
# ..conversion to Treetop grammars (http://treetop.rubyforge.org/)
#
# This code is mostly naturally borrowed from http://piumarta.com/software/peg/
#
#
# Below is the original header from leg.leg (this file's precursor)
#
##
# LE Grammar for LE Grammars
# 
# Copyright (c) 2007 by Ian Piumarta
# All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the 'Software'),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, provided that the above copyright notice(s) and this
# permission notice appear in all copies of the Software.  Acknowledgement
# of the use of this Software in supporting documentation would be
# appreciated but is not required.
# 
# THE SOFTWARE IS PROVIDED 'AS IS'.  USE ENTIRELY AT YOUR OWN RISK.
# 
# Last edited: 2007-09-13 08:12:17 by piumarta on emilia.local

%{
#define CAPITALS_ARE_BAD_FOR_RUBY

#define RUBY_SYM_MAX_LEN 127
#define RUBY_SYM_DASH "__"

#define RUBY_SYM_MAX_CHAR_LEN 2


# include <stdio.h>
# include <stdlib.h>
# include <unistd.h>
# include <string.h>
# include <libgen.h>
# include <assert.h>
# include <ctype.h>


  FILE *input= 0;
  FILE *output= 0;

  int	verboseFlag= 0;

  static int	 lineNumber= 0;
  static char	*fileName= 0;


  void yyerror(char *message);

# define YY_INPUT(buf, result, max)		\
  {						\
    int c= getc(input);				\
    if ('\n' == c || '\r' == c) ++lineNumber;	\
    result= (EOF == c) ? 0 : (*(buf)= c, 1);	\
  }

# define YY_LOCAL(T)	static T
# define YY_RULE(T)	static T

  static const char* ruby_sym(const char* def_id)
  {
    static char buf[RUBY_SYM_MAX_LEN + 1];
    char* pb = buf;

    for (const char* pc = def_id; *pc != '\0' &&
		 (pb - buf) < (RUBY_SYM_MAX_LEN - RUBY_SYM_MAX_CHAR_LEN); pc++)
      if (*pc == '-')
	pb += sprintf(pb, RUBY_SYM_DASH);
#ifdef CAPITALS_ARE_BAD_FOR_RUBY
      else if (isupper(*pc)) {
        if (pc != def_id)
          *(pb++) = '_';
	*(pb++) = tolower(*pc);
      }
#endif
      else /* TODO rm? if (!isspace(*pc)) */
	*(pb++) = *pc;
    *pb = '\0';

    return buf;
  }

  static void fcomment_cont(FILE* out, const char* comment)
  {
    const char* panl;

    fputs("  # TODO [Convert me!] ", out);

    while (comment != NULL) {
      panl = strchr(comment, '\n');

      if (panl != NULL) {
	fwrite(comment, (++panl) - comment, 1, out);
	fputs("	 # ", out);
      } else
	fputs(comment, out);
      comment = panl;
    }
    fputc('\n', out);
  }

%}

# Hierarchical syntax

grammar=	- ( declaration | definition )+ trailer? end-of-file

declaration=	'%{' < ( !'%}' . )* > RPERCENT		{ fcomment_cont(output, yytext); }

trailer=	'%%' < .* >				{ fcomment_cont(output, yytext); }

definition=	( identifier				{ fprintf(output, "\nrule %s\n", ruby_sym(yytext)); } )
			EQUAL expression
			SEMICOLON?			{ fprintf(output, "\nend\n"); }

expression=	sequence ( ( BAR			{ fputs(" / ", output); } )
			sequence )*

sequence=	( prefix				{ fputc(' ', output); } )
			( prefix			{ fputc(' ', output); }
			  )*

prefix=		AND action				{ fprintf(output, " &{");
							  fcomment_cont(output, yytext);
							  fputs(" }", output); }
|		( AND					  { fputs(" &", output); } )
			suffix
|		( NOT					  { fputs(" !", output); } )
			suffix
|		    suffix

suffix=		primary (QUESTION			{ fputs("?", output); }
			     | STAR			{ fputs("*", output); }
			     | PLUS			{ fputs("+", output); }
			   )?

primary=	( identifier				  { fputs(ruby_sym(yytext), output); } )
			COLON identifier !EQUAL		{ fputc(':', output);
							  fputs(ruby_sym(yytext), output); }
|		( identifier !EQUAL			{ fputs(ruby_sym(yytext), output); } )
|		( OPEN					  { fputs("(", output); } )
			expression CLOSE		{ fputs(")", output); }
|		literal					{ fprintf(output, "\"%s\"", yytext); }
|		class					{ fprintf(output, "[%s]", yytext); }
|		DOT					{ fputc('.', output); }
|		action					{ fprintf(output, " {");
							  fcomment_cont(output, yytext);
							  fputs(" }", output); }
|		BEGIN					{ fputs(" yy_", output); }
|		END					{ fputs(" _yy", output); }

# Lexical syntax

identifier=	< [-a-zA-Z_][-a-zA-Z_0-9]* > -

literal=	['] < ( !['] char )* > ['] -
|		["] < ( !["] char )* > ["] -

class=		'[' < ( !']' range )* > ']' -

range=		char '-' char | char

char=		'\\' [abefnrtv'"\[\]\\]
|		'\\' [0-3][0-7][0-7]
|		'\\' [0-7][0-7]?
|		!'\\' .

action=		'{' < braces* > '}' -

braces=		'{' (!'}' .)* '}'
|		!'}' .

EQUAL=		'=' -
COLON=		':' -
SEMICOLON=	';' -
BAR=		'|' -
AND=		'&' -
NOT=		'!' -
QUESTION=	'?' -
STAR=		'*' -
PLUS=		'+' -
OPEN=		'(' -
CLOSE=		')' -
DOT=		'.' -
BEGIN=		'<' -
END=		'>' -
RPERCENT=	'%}' -

-=		(space | comment)*
space=		' ' | '\t' | end-of-line
comment=	'#' (!end-of-line .)* end-of-line
end-of-line=	'\r\n' | '\n' | '\r'
end-of-file=	!.

%%

void yyerror(char *message)
{
  fprintf(stderr, "%s:%d: %s", fileName, lineNumber, message);
  if (yytext[0]) fprintf(stderr, " near token '%s'", yytext);
  if (yypos < yylimit || !feof(input))
    {
      yybuf[yylimit]= '\0';
      fprintf(stderr, " before text \"");
      while (yypos < yylimit)
	{
	  if ('\n' == yybuf[yypos] || '\r' == yybuf[yypos]) break;
	  fputc(yybuf[yypos++], stderr);
	}
      if (yypos == yylimit)
	{
	  int c;
	  while (EOF != (c= fgetc(input)) && '\n' != c && '\r' != c)
	    fputc(c, stderr);
	}
      fputc('\"', stderr);
    }
  fprintf(stderr, "\n");
  exit(1);
}


static void usage(char *name)
{
  fprintf(stderr, "usage: %s [<option>...] [<file>...]\n", name);
  fprintf(stderr, "where <option> can be\n");
  fprintf(stderr, "  -h		 print this help information\n");
  fprintf(stderr, "  -o <ofile>	 write output to <ofile>\n");
  fprintf(stderr, "  -v		 be verbose\n");
  fprintf(stderr, "if no <file> is given, input is read from stdin\n");
  fprintf(stderr, "if no <ofile> is given, output is written to stdout\n");
  exit(1);
}

int main(int argc, char **argv)
{
  int	c;

  output= stdout;
  input= stdin;
  lineNumber= 1;
  fileName= "<stdin>";

  while (-1 != (c= getopt(argc, argv, "ho:v")))
    {
      switch (c)
	{
	case 'h':
	  usage(basename(argv[0]));
	  break;

	case 'o':
	  if (!(output= fopen(optarg, "w")))
	    {
	      perror(optarg);
	      exit(1);
	    }
	  break;

	case 'v':
	  verboseFlag= 1;
	  break;

	default:
	  fprintf(stderr, "for usage try: %s -h\n", argv[0]);
	  exit(1);
	}
    }
  argc -= optind;
  argv += optind;

  if (argc)
    {
      for (;  argc;  --argc, ++argv)
	{
	  if (!strcmp(*argv, "-"))
	    {
	      input= stdin;
	      fileName= "<stdin>";
	    }
	  else
	    {
	      if (!(input= fopen(*argv, "r")))
		{
		  perror(*argv);
		  exit(1);
		}
	      fileName= *argv;
	    }
	  lineNumber= 1;
	}
    }

  fprintf(output, "# Preprocessed for leg->treetop conversion by leg2tt\n"
    "# Please complete the task: eliminate TODOs, yy_'s and _yy's, change the name\n"
    "# WARNINGs:\n# - original comments are NOT preserved (FIXME)\n"
    "# - in-rule code blocks may need to be parenthesised along with the expressions they refer to (FIXME?)\n"
    "# - the literals got double-quoted, watch for undesired in-string evaluations\n"
    "# - the rule names got rubified, watch for accidental duplications\n"
                                               "\ngrammar GrammarName\n\n");
  if (!yyparse())
    yyerror("Syntax error!\nNote: at the moment Treetop doesn't seem to allow code blocks inside a sequence,\nPlease consider extra parenthesis if it looks like that kind of a problem.");
  else
    fputs("\n\n\nrule yy_\n ''\nend\nrule _yy\n ''\nend\nend\n", output);

  if (input != stdin)
    fclose(input);

  if (output != stdout)
    fclose(output);


  return 0;
}
